class Solution {
public:
    // breadth first approach will be used 
    int orangesRotting(vector<vector<int>>& grid) {
       if(grid.size()==0) return 0;
        queue<pair<int, int>> rotten;
        int total = 0;  // to count total number of fresh and rotten oranges
        for(int i=0; i<grid.size(); i++){
            for(int j=0; j<grid[i].size(); j++){
                if(grid[i][j] != 0) total ++;; // empty cell doesn't count
                if(grid[i][j] == 2) rotten.push({i,j}); // push rotten into queue
            }
        }
        // [0,1] for right
        // [0,-1] for left
        // [1,0] for down
        // [-1,0] for up 
        int dx[4] = {0, 0, 1,-1};
        int dy[4] = {1,-1, 0, 0};
        int count=0, time=0; // current count of fresh+rotten
       while(!rotten.empty()){
            int k = rotten.size();
            count += k; 
            while(k--){
                int x = rotten.front().first, y = rotten.front().second;
                rotten.pop();
                for(int i = 0; i < 4; ++i){
                    int nx = x + dx[i], ny = y + dy[i];
                    if(nx < 0 || ny < 0 || nx >= grid.size() || ny >= grid[0].size() || grid[nx][ny] != 1) continue;
                    grid[nx][ny] = 2;
                    rotten.push({nx, ny});
                }
            }
            if(!rotten.empty()) time++;
        }
        //cout << total << count;
        return total == count ? time : -1;
    }
};